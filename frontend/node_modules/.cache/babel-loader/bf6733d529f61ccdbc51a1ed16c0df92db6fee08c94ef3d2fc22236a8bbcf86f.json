{"ast":null,"code":"var _jsxFileName = \"/Users/arthur/Documents/GitHub/docker-app/frontend/src/component/FileUpload.js\",\n  _s = $RefreshSig$();\n// src/components/FileUpload.js\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from './AuthContext';\nimport './FileUpload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FileUpload() {\n  _s();\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop: onUpload\n  });\n  const handleUpload = acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const data = new FormData();\n      data.append('file', file);\n      const uploadUrl = 'http://127.0.0.1:8000/upload';\n      fetch('/your-upload-endpoint', {\n        // Remplacez cela par l'URL de votre endpoint Python\n        method: 'POST',\n        body: data\n      }).then(response => {\n        if (!response.ok) {\n          let errorMessage = 'Erreur lors du téléversement des fichiers';\n          switch (response.status) {\n            case 400:\n              errorMessage = 'Erreur du client lors de l\\'envoi des fichiers';\n              break;\n            case 401:\n              errorMessage = 'Erreur d\\'authentification';\n              break;\n            case 422:\n              errorMessage = 'Fichier non traitable envoyé';\n              break;\n            default:\n              errorMessage = `Erreur inconnue (statut ${response.status})`;\n              break;\n          }\n          throw new Error(errorMessage);\n        }\n      });\n    });\n  };\n  const {\n    authToken\n  } = useAuth();\n  const handleDrop = useCallback(async e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragActive(false);\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const files = e.dataTransfer.files;\n      const formData = new FormData();\n\n      // Ajout des fichiers à FormData\n      for (let i = 0; i < files.length; i++) {\n        formData.append('files', files[i]);\n      }\n\n      // backend upload url\n\n      try {\n        const response = await fetch(uploadUrl, {\n          method: 'POST',\n          body: formData,\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          }\n        });\n\n        // Traitement de la réponse du serveur\n        const data = await response.json();\n        console.log('Fichiers téléversés avec succès:', data);\n      } catch (error) {\n        console.error('Erreur lors du téléversement des fichiers:', error);\n      }\n    }\n  }, [authToken]);\n  const {\n    isAuthenticated,\n    userRole\n  } = useAuth();\n  if (!isAuthenticated || !userRole === 'admin') {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...getRootProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drop the files here ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag 'n' drop some files here, or click to select files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUpload, \"kjcYsMW9DRRQDANZ7kkn7Lk0Cr4=\", false, function () {\n  return [useDropzone, useAuth, useAuth];\n});\n_c = FileUpload;\n;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useCallback","useState","useDropzone","Navigate","useAuth","FileUpload","getRootProps","getInputProps","isDragActive","onDrop","onUpload","handleUpload","acceptedFiles","forEach","file","data","FormData","append","uploadUrl","fetch","method","body","then","response","ok","errorMessage","status","Error","authToken","handleDrop","e","preventDefault","stopPropagation","setIsDragActive","dataTransfer","files","formData","i","length","headers","json","console","log","error","isAuthenticated","userRole"],"sources":["/Users/arthur/Documents/GitHub/docker-app/frontend/src/component/FileUpload.js"],"sourcesContent":["// src/components/FileUpload.js\nimport React, { useCallback, useState } from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from './AuthContext';\nimport './FileUpload.css';\n\nfunction FileUpload(){\n  \n  const {getRootProps, getInputProps, isDragActive} = useDropzone({\n    onDrop: onUpload,\n  });\n\n  const handleUpload = (acceptedFiles) => {\n    \n    acceptedFiles.forEach((file) => {\n      const data = new FormData();\n      data.append('file', file);\n\n      const uploadUrl = 'http://127.0.0.1:8000/upload';\n\n\n      fetch('/your-upload-endpoint', { // Remplacez cela par l'URL de votre endpoint Python\n        method: 'POST',\n        body: data,\n      }).then((response) => {\n\n        if (!response.ok) {\n          let errorMessage = 'Erreur lors du téléversement des fichiers';\n          switch (response.status) {\n            case 400:\n              errorMessage = 'Erreur du client lors de l\\'envoi des fichiers';\n              break;\n            case 401:\n              errorMessage = 'Erreur d\\'authentification';\n              break;\n            case 422:\n              errorMessage = 'Fichier non traitable envoyé';\n              break;\n            default:\n              errorMessage = `Erreur inconnue (statut ${response.status})`;\n              break;\n          }\n          throw new Error(errorMessage);\n        }\n      \n      });\n    });\n  };\n\n  const { authToken } = useAuth();\n\n  const handleDrop = useCallback(\n    async (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsDragActive(false);\n\n      if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n        \n        const files = e.dataTransfer.files;\n        const formData = new FormData();\n    \n        // Ajout des fichiers à FormData\n        for (let i = 0; i < files.length; i++) {\n          formData.append('files', files[i]);\n        }\n      \n        // backend upload url\n    \n        try {\n          const response = await fetch(uploadUrl, {\n            method: 'POST',\n            body: formData,\n            headers: { \n              'Authorization': `Bearer ${authToken}`\n            },\n          });\n        \n          \n          // Traitement de la réponse du serveur\n          const data = await response.json();\n          console.log('Fichiers téléversés avec succès:', data);\n        \n        } catch (error) {\n          console.error('Erreur lors du téléversement des fichiers:', error);\n        }   \n      }   \n    },\n    [authToken]\n  );\n  \n  const { isAuthenticated, userRole } = useAuth();\n\n  if (!isAuthenticated || !userRole ==='admin') {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>Drop the files here ...</p> :\n          <p>Drag 'n' drop some files here, or click to select files</p>\n      }\n    </div>\n  )\n};\n\nexport default FileUpload;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}